# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/misc.ipynb.

# %% auto 0
__all__ = ['average_days_with_sales', 'linear_log_trend']

# %% ../nbs/misc.ipynb 2
import numpy as np
from numba import njit

# %% ../nbs/misc.ipynb 3
@njit
def average_days_with_sales(x: np.ndarray, lag: int) -> np.ndarray:
    """Calculates the average number of days with sales over a specified lag period.
    Useful for understanding the sales frequency of each SKU.
    
    Parameters
    ----------
    x : np.ndarray
        Array of sales data.
    lag: int
        The number of days to look back.
    
    Returns
    -------
    np.ndarray
        Array with the average number of days with sales for each point in time.
    """
    n = len(x)
    result = np.zeros(n)  # Initializes the result with zeros instead of NaN
    for i in range(lag - 1, n):
        sum_positive_sales = np.sum(x[i - lag + 1:i + 1] > 0)
        result[i] = sum_positive_sales / lag if lag > 0 else 0.0
    return result

# %% ../nbs/misc.ipynb 5
@njit
def linear_log_trend(x: np.ndarray) -> np.ndarray:
    """Generates a linear logarithmic trend for a time series.
    
    Parameters
    ----------
    x : np.ndarray
        Array of time series data.
    
    Returns
    -------
    np.ndarray
        Array representing the natural logarithm of each time point.
    """
    n = len(x)
    t = np.arange(1, n + 1)  # Creates a time array from 1 to n
    log_trend = np.log(t)  # Calculates the natural logarithm of each time point
    return log_trend
